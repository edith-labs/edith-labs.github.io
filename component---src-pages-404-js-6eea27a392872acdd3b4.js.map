{"version":3,"sources":["webpack:///./src/components/layout.js","webpack:///./src/components/seo.js","webpack:///./src/pages/404.js"],"names":["Layout","children","data","posts","allMarkdownRemark","edges","Navbar","class","style","padding","to","fluid","placeholderImage","childImageSharp","marginTop","rhythm","marginBottom","map","node","slug","fields","title","frontmatter","href","target","color","Date","getFullYear","SEO","description","lang","meta","site","metaDescription","siteMetadata","htmlAttributes","titleTemplate","name","content","property","author","concat","defaultProps","NotFoundPage"],"mappings":"4MAuGeA,EA/FA,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACVC,EAAI,OA8BJC,EAAQD,EAAKE,kBAAkBC,MAErC,OACE,oCACE,kBAACC,EAAA,EAAD,MACCL,EACD,4BAAQM,MAAM,iBACZ,yBAAKA,MAAM,aACX,yBAAKA,MAAM,aACT,yBAAKA,MAAM,+BAA+BC,MAAO,CAAEC,QAAS,IAC1D,kBAAC,OAAD,CAAMC,GAAG,KACP,kBAAC,IAAD,CAAKC,MAAOT,EAAKU,iBAAiBC,gBAAgBF,UAItD,yBAAKJ,MAAM,UAAUC,MAAO,CAAEM,UAAWC,YAAO,KAAMC,aAAcD,YAAO,OAEzE,yBAAKR,MAAM,eACT,kBAAC,OAAD,CAAMG,GAAG,KACP,wBAAIH,MAAM,YAAV,UAIJ,yBAAKA,MAAM,eAET,kBAAC,OAAD,CAAMG,GAAG,SACP,wBAAIH,MAAM,WAAWC,MAAO,CAAEQ,aAAcD,YAAO,KAAnD,SAGDZ,EAAMc,KAAI,oBAAGC,KAAkBC,EAArB,EAAWC,OAAUD,KAAuBE,EAA5C,EAA6BC,YAAeD,MAA5C,OACT,kBAAC,OAAD,CAAMX,GAAIS,GAAM,uBAAGZ,MAAM,eAAec,QAK5C,yBAAKd,MAAM,eAET,wBAAIA,MAAM,WAAWC,MAAO,CAAEQ,aAAcD,YAAO,KAAnD,UAEA,uBACEQ,KAAM,iCACNC,OAAO,UAEP,uBAAGjB,MAAM,eAAc,kBAAC,IAAD,QAEzB,uBAAGgB,KAAM,8BACP,uBAAGhB,MAAM,eAAc,kBAAC,IAAD,UAO7B,uBAAGC,MAAO,CAAEiB,MAAO,uBAAnB,gBACe,IAAIC,MAAOC,cAD1B,oB,iCCvFV,SAASC,EAAT,GAAkD,IAAnCC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,KAAMV,EAAS,EAATA,MAC9BW,EADuC,OACvCA,KAcFC,EAAkBJ,GAAeG,EAAKE,aAAaL,YAEzD,OACE,kBAAC,IAAD,CACEM,eAAgB,CACdL,QAEFT,MAAOA,EACPe,cAAa,QAAUJ,EAAKE,aAAab,MACzCU,KAAM,CACJ,CACEM,KAAK,cACLC,QAASL,GAEX,CACEM,SAAS,WACTD,QAASjB,GAEX,CACEkB,SAAS,iBACTD,QAASL,GAEX,CACEM,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,QAASN,EAAKE,aAAaM,QAE7B,CACEH,KAAK,gBACLC,QAASjB,GAEX,CACEgB,KAAK,sBACLC,QAASL,IAEXQ,OAAOV,KAKfH,EAAIc,aAAe,CACjBZ,KAAK,KACLC,KAAM,GACNF,YAAY,IAUCD,QCnEAe,UARM,kBACnB,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAKtB,MAAM,mBACX,yCACA","file":"component---src-pages-404-js-6eea27a392872acdd3b4.js","sourcesContent":["import { useStaticQuery, graphql, Link } from 'gatsby';\nimport Img from \"gatsby-image\"\nimport React from 'react';\nimport { FaEnvelope, FaTwitter } from 'react-icons/fa';\n\nimport { rhythm } from '../utils/typography';\nimport Navbar from '../components/Navbar';\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n      allMarkdownRemark(sort: { fields: [frontmatter___title], order: DESC }) {\n        edges {\n          node {\n            fields {\n              slug\n            }\n            frontmatter {\n              title\n              date(formatString: \"MMMM D, YYYY\")\n              excerpt\n            }\n          }\n        }\n      }\n      placeholderImage: file(relativePath: { eq: \"logo-white.png\" }) {\n        childImageSharp {\n          fluid(maxWidth: 300) {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n    }\n  `);\n  const posts = data.allMarkdownRemark.edges;\n\n  return (\n    <>\n      <Navbar />\n      {children}\n      <footer class='hero is-light'>\n        <div class='hero-body'>\n        <div class='container'>\n          <div class='column is-2 is-hidden-mobile' style={{ padding: 0 }}>\n            <Link to='/'>\n              <Img fluid={data.placeholderImage.childImageSharp.fluid} />\n            </Link>\n          </div>\n\n          <div class='columns' style={{ marginTop: rhythm(1.5), marginBottom: rhythm(1.5) }}>\n\n            <div class='column is-4'>\n              <Link to='/'>\n                <h4 class='subtitle'>Home</h4>\n              </Link>\n            </div>\n\n            <div class='column is-4'>\n\n              <Link to='/blog' >\n                <h4 class='subtitle' style={{ marginBottom: rhythm(1) }}>Blog</h4>\n              </Link>\n\n              {posts.map(({ node: { fields: { slug }, frontmatter: { title } } }) => (\n                <Link to={slug}><p class='footer-link'>{title}</p></Link>\n              ))}\n\n            </div>\n\n            <div class='column is-4'>\n\n              <h4 class='subtitle' style={{ marginBottom: rhythm(1) }}>Social</h4>\n\n              <a\n                href={'https://twitter.com/edith_labs'}\n                target='_blank'\n              >\n                <p class='footer-link'><FaTwitter /></p>\n              </a>\n              <a href={'mailto:hello@edithlabs.com'}>\n                <p class='footer-link'><FaEnvelope /></p>\n              </a>\n\n            </div>\n\n          </div>\n\n          <p style={{ color: 'rgb(124, 124, 124)' }}>\n            Copyright Â© {new Date().getFullYear()} Edith Labs\n          </p>\n\n         </div>\n         </div>\n      </footer>\n    </>\n  );\n}\n\nexport default Layout\n","import { useStaticQuery, graphql } from 'gatsby'\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n};\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n};\n\nexport default SEO;\n","import React from \"react\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\nconst NotFoundPage = () => (\n  <Layout>\n    <SEO title=\"404: Not found\" />\n    <h1>NOT FOUND</h1>\n    <p>You just hit a route that doesn&#39;t exist... the sadness.</p>\n  </Layout>\n)\n\nexport default NotFoundPage\n"],"sourceRoot":""}